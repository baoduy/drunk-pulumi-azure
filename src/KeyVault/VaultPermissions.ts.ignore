import * as pulumi from "@pulumi/pulumi";
import { roleAssignment } from "../AzAd/RoleAssignment";
import * as native from "@pulumi/azure-native";
import { EnvRolesInfo } from "../AzAd/EnvRoles";
import { Output } from "@pulumi/pulumi";

export interface PermissionProps {
  /** The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. */
  objectId: pulumi.Input<string>;
  /** Application ID of the client making request on behalf of a principal */
  applicationId?: pulumi.Input<string>;
  permission: "ReadOnly" | "ReadWrite";
  principalType?: native.authorization.PrincipalType;
}

const grantVaultRbacPermission = ({
  name,
  objectId,
  permission,
  scope,
  principalType = "User",
}: PermissionProps & {
  name: string;
  scope: pulumi.Input<string>;
}) => {
  const vn = `${name}-${permission}`.toLowerCase();

  const defaultProps = {
    principalId: objectId,
    scope,
  };

  //ReadOnly
  if (permission === "ReadOnly") {
    roleAssignment({
      ...defaultProps,
      name: `${vn}-encrypt`,
      roleName: "Key Vault Crypto Service Encryption User",
      principalType,
    });
    roleAssignment({
      ...defaultProps,
      name: `${vn}-crypto`,
      roleName: "Key Vault Crypto User",
      principalType,
    });
    roleAssignment({
      ...defaultProps,
      name: `${vn}-secret`,
      roleName: "Key Vault Secrets User",
      principalType,
    });
    //Read and Write
  } else {
    roleAssignment({
      ...defaultProps,
      name: `${vn}-contributor`,
      roleName: "Key Vault Administrator",
      principalType,
    });
    roleAssignment({
      ...defaultProps,
      name: `${vn}-cert`,
      roleName: "Key Vault Certificates Officer",
      principalType,
    });
    roleAssignment({
      ...defaultProps,
      name: `${vn}-crypto`,
      roleName: "Key Vault Crypto Officer",
      principalType,
    });
    roleAssignment({
      ...defaultProps,
      name: `${vn}-secret`,
      roleName: "Key Vault Secrets Officer",
      principalType,
    });
  }
};

export const grantVaultPermissionToRole = ({
  name,
  vaultId,
  envRoles,
}: {
  name: string;
  vaultId: Output<string>;
  envRoles: IEnvRoleBuilder;
}) => {
  //Grant RBAC permission to Group
  grantVaultRbacPermission({
    name: `${name}-readOnly`,
    scope: vaultId,
    objectId: envRoles.readOnly.objectId,
    permission: "ReadOnly",
    principalType: "Group",
  });

  grantVaultRbacPermission({
    name: `${name}-admin`,
    scope: vaultId,
    objectId: envRoles.admin.objectId,
    permission: "ReadWrite",
    principalType: "Group",
  });
};
